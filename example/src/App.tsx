import * as React from 'react';
import { Buffer } from 'buffer';
import { sha256 } from 'react-native-sha256';
import { StyleSheet, SafeAreaView, Text, ScrollView } from 'react-native';
import {
  generateHardwareKey,
  getAttestation,
  isAttestationServiceAvailable,
  generateHardwareSignatureWithAssertion,
} from '@pagopa/io-react-native-integrity';
import ButtonWithLoader from './components/ButtonWithLoader';

const challenge = 'challengeFromServer';

export default function App() {
  const [hardwareKeyTag, setHardwareKeyTag] = React.useState<
    string | undefined
  >('');
  const [attestation, setAttestation] = React.useState<string | undefined>('');
  const [decodedAttestation, setDecodedAttestation] = React.useState<
    string | undefined
  >('');
  const [isServiceAvailable, setIsServiceAvailable] =
    React.useState<boolean>(false);
  const [debugLog, setDebugLog] = React.useState<string>('.. >');

  React.useEffect(() => {
    isAttestationServiceAvailable()
      .then((result) => {
        setIsServiceAvailable(result);
      })
      .catch((error) => {
        setDebugLog(error);
      });
  }, []);

  const getHardwareKey = async () => {
    if (hardwareKeyTag === '' || hardwareKeyTag === undefined) {
      setHardwareKeyTag(undefined);
      const hardwareKey = await generateHardwareKey();
      setHardwareKeyTag(hardwareKey);
      setDebugLog(hardwareKey);
    } else {
      setDebugLog(hardwareKeyTag);
    }
  };

  const requestAttestation = async () => {
    setAttestation(undefined);
    if (hardwareKeyTag) {
      const result = await getAttestation(challenge, hardwareKeyTag);
      setAttestation(result);
      setDebugLog(result);
    }
  };

  const decodeAttestation = () => {
    // decode attestation from base64 to string
    setDecodedAttestation(undefined);
    if (attestation) {
      const attestationDecoded = Buffer.from(attestation, 'base64').toString(
        'hex'
      );
      setDecodedAttestation(attestationDecoded);
      setDebugLog(attestationDecoded);
    }
  };

  const getHardwareSignatureWithAssertion = async () => {
    // this is a mocked jwk for ephimeral public key, in a production
    // environment the ephimeral key must be generated by the client
    // every time a WTE must be required
    const jwk = {
      crv: 'P-256',
      kty: 'EC',
      x: '4HNptI-xr2pjyRJKGMnz4WmdnQD_uJSq4R95Nj98b44',
      y: 'LIZnSB39vFJhYgS3k7jXE4r3-CoGFQwZtPBIRqpNlrg',
      kid: 'vbeXJksM45xphtANnCiG6mCyuU4jfGNzopGuKvogg9c',
    };

    const clientData = {
      challenge: challenge,
      jwk: jwk,
    };

    // Between Android and iOS there is a difference for the generation of hardwareSignature
    // and assertion as on iOS both are generated directly from the SDK via generateAssertion
    // while on Android the hardwareSignature must be generated via the signature functions and
    // the assertion must be retrieved from the backend via an integrityToken.
    if (hardwareKeyTag) {
      const clientDataHash = await sha256(JSON.stringify(clientData));

      const result = await generateHardwareSignatureWithAssertion(
        clientDataHash,
        hardwareKeyTag
      );
      setDebugLog(result);
    }
  };

  return (
    <SafeAreaView style={styles.container}>
      <Text style={styles.h1}>Integrity Check Demo App</Text>
      {isServiceAvailable ? (
        <>
          <ButtonWithLoader
            title="Generate Hardware Key"
            onPress={() => getHardwareKey()}
            loading={hardwareKeyTag === undefined}
          />
          <ButtonWithLoader
            title="Get attestation"
            onPress={() => requestAttestation()}
            loading={attestation === undefined}
          />
          <ButtonWithLoader
            title="Decode Attestation"
            onPress={() => decodeAttestation()}
            loading={decodedAttestation === undefined}
          />
          <ButtonWithLoader
            title="Generate Hardware Signature"
            onPress={() => getHardwareSignatureWithAssertion()}
            loading={decodedAttestation === undefined}
          />
        </>
      ) : null}
      <ScrollView style={styles.debug}>
        <Text>{debugLog}</Text>
      </ScrollView>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
  },
  h1: {
    fontWeight: 'bold',
    fontSize: 32,
    textAlign: 'center',
    marginTop: 50,
    marginBottom: 50,
  },
  debug: {
    width: '100%',
    height: 300,
    position: 'absolute',
    bottom: 0,
    backgroundColor: '#eaeaea',
  },
});
